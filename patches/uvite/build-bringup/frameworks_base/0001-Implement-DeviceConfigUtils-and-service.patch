From 60a15f67c5f7cd4c36260563f4d88bab7bccede1 Mon Sep 17 00:00:00 2001
From: jhenrique09 <jhsv09@gmail.com>
Date: Thu, 10 Aug 2023 14:22:06 +0000
Subject: [PATCH] Implement DeviceConfigUtils and service

- Allow overriding device configs while using GMS as device configurator package

Change-Id: Ie7327610feca7a390915511088dfef831c946853

DeviceConfigUtils: Make debug optional

Change-Id: I65ffac8fd0a9971297b8d721d860face571a2d44
(cherry picked from commit 9f54af5392d7ca70e1e495fc97560538459844e7)

DeviceConfig: Change setProperties behavior

Change-Id: I7cf1574f423c7362e6a7c9d8a002e4b20e5e7f87
(cherry picked from commit f94a2c97e7bf53ee6681183f2394878369e99470)

* Adapt to Android 14

Change-Id: I8beea22791f7b043bc0a2e0dfdb4249057b0bb85
Signed-off-by: Gustavo Mendes <gusttavo.me@outlook.com>
---
 core/java/android/provider/Settings.java      | 13 ++-
 .../util/custom/DeviceConfigUtils.java        | 85 +++++++++++++++++++
 core/res/res/values/aospa_config.xml          |  6 ++
 core/res/res/values/aospa_symbols.xml         |  4 +
 .../custom/CustomDeviceConfigService.java     | 34 ++++++++
 .../java/com/android/server/SystemServer.java |  7 ++
 6 files changed, 148 insertions(+), 1 deletion(-)
 create mode 100644 core/java/com/android/internal/util/custom/DeviceConfigUtils.java
 create mode 100644 services/core/java/com/android/server/custom/CustomDeviceConfigService.java

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 52e3dd99df6c..a505d06edb1d 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -117,6 +117,8 @@ import java.util.Set;
 import java.util.concurrent.Executor;
 import java.util.function.Consumer;
 
+import com.android.internal.util.custom.DeviceConfigUtils;
+
 /**
  * The Settings provider contains global system-level device preferences.
  */
@@ -19540,6 +19542,9 @@ public final class Settings {
         @RequiresPermission(Manifest.permission.WRITE_DEVICE_CONFIG)
         public static boolean putString(@NonNull String namespace,
                 @NonNull String name, @Nullable String value, boolean makeDefault) {
+            if (DeviceConfigUtils.shouldDenyDeviceConfigControl(namespace, name)) {
+                return true;
+            }
             ContentResolver resolver = getContentResolver();
             return sNameValueCache.putStringForUser(resolver, createCompositeName(namespace, name),
                     value, null, makeDefault, resolver.getUserId(),
@@ -19561,7 +19566,9 @@ public final class Settings {
         public static boolean setStrings(@NonNull String namespace,
                 @NonNull Map<String, String> keyValues)
                 throws DeviceConfig.BadConfigException {
-            return setStrings(getContentResolver(), namespace, keyValues);
+            boolean result = setStrings(getContentResolver(), namespace, keyValues);
+            DeviceConfigUtils.setDefaultProperties(namespace, null);
+            return result;
         }
 
         /**
@@ -19611,6 +19618,9 @@ public final class Settings {
         @RequiresPermission(Manifest.permission.WRITE_DEVICE_CONFIG)
         public static boolean deleteString(@NonNull String namespace,
                 @NonNull String name) {
+            if (DeviceConfigUtils.shouldDenyDeviceConfigControl(namespace, name)) {
+                return true;
+            }
             ContentResolver resolver = getContentResolver();
             return sNameValueCache.deleteStringForUser(resolver,
                     createCompositeName(namespace, name), resolver.getUserId());
@@ -19647,6 +19657,7 @@ public final class Settings {
             } catch (RemoteException e) {
                 Log.w(TAG, "Can't reset to defaults for " + CONTENT_URI, e);
             }
+            DeviceConfigUtils.setDefaultProperties(null, null);
         }
 
         /**
diff --git a/core/java/com/android/internal/util/custom/DeviceConfigUtils.java b/core/java/com/android/internal/util/custom/DeviceConfigUtils.java
new file mode 100644
index 000000000000..ad168382d1c1
--- /dev/null
+++ b/core/java/com/android/internal/util/custom/DeviceConfigUtils.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (C) 2023 The Pixel Experience Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.internal.util.custom;
+
+import android.content.res.Resources;
+import android.provider.Settings;
+import android.util.Log;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import com.android.internal.util.ArrayUtils;
+
+public class DeviceConfigUtils {
+
+    private static final String TAG = DeviceConfigUtils.class.getSimpleName();
+
+    private static final boolean DEBUG = false;
+
+    private static String[] getDeviceConfigsOverride() {
+        String[] globalDeviceConfigs =
+            Resources.getSystem().getStringArray(com.android.internal.R.array.global_device_configs_override);
+        String[] deviceConfigs =
+            Resources.getSystem().getStringArray(com.android.internal.R.array.device_configs_override);
+        String[] allDeviceConfigs = Arrays.copyOf(globalDeviceConfigs, globalDeviceConfigs.length + deviceConfigs.length);
+        System.arraycopy(deviceConfigs, 0, allDeviceConfigs, globalDeviceConfigs.length, deviceConfigs.length);
+        return allDeviceConfigs;
+    }
+
+    public static boolean shouldDenyDeviceConfigControl(String namespace, String property) {
+        if (DEBUG) Log.d(TAG, "shouldAllowDeviceConfigControl, namespace=" + namespace + ", property=" + property);
+        for (String p : getDeviceConfigsOverride()) {
+            String[] kv = p.split("=");
+            String fullKey = kv[0];
+            String[] nsKey = fullKey.split("/");
+            if (nsKey[0] == namespace && nsKey[1] == property){
+                if (DEBUG) Log.d(TAG, "shouldAllowDeviceConfigControl, deny, namespace=" + namespace + ", property=" + property);
+                return true;
+            }
+        }
+        if (DEBUG) Log.d(TAG, "shouldAllowDeviceConfigControl, allow, namespace=" + namespace + ", property=" + property);
+        return false;
+    }
+
+    public static void setDefaultProperties(String filterNamespace, String filterProperty) {
+        if (DEBUG) Log.d(TAG, "setDefaultProperties");
+        for (String p : getDeviceConfigsOverride()) {
+            String[] kv = p.split("=");
+            String fullKey = kv[0];
+            String[] nsKey = fullKey.split("/");
+
+            String namespace = nsKey[0];
+            String key = nsKey[1];
+
+            if (filterNamespace != null && filterNamespace == namespace){
+                continue;
+            }
+
+            if (filterProperty != null && filterProperty == key){
+                continue;
+            }
+
+            String value = "";
+            if (kv.length > 1) {
+                value = kv[1];
+            }
+            Settings.Config.putString(namespace, key, value, false);
+        }
+    }
+}
diff --git a/core/res/res/values/aospa_config.xml b/core/res/res/values/aospa_config.xml
index c1dc33c75660..d1bde65c5b0c 100644
--- a/core/res/res/values/aospa_config.xml
+++ b/core/res/res/values/aospa_config.xml
@@ -16,6 +16,12 @@
 -->
 <resources>
 
+    <!-- Define device configs on boot -->
+    <string-array name="global_device_configs_override" translatable="false">
+    </string-array>
+    <string-array name="device_configs_override" translatable="false">
+    </string-array>
+
     <!-- Whether device has an alert slider. -->
     <bool name="config_hasAlertSlider">false</bool>
 
diff --git a/core/res/res/values/aospa_symbols.xml b/core/res/res/values/aospa_symbols.xml
index 6fdcf534eaac..b7e66bcc931c 100644
--- a/core/res/res/values/aospa_symbols.xml
+++ b/core/res/res/values/aospa_symbols.xml
@@ -16,6 +16,10 @@
 -->
 <resources>
 
+    <!-- Define device configs on boot -->
+    <java-symbol type="array" name="global_device_configs_override" />
+    <java-symbol type="array" name="device_configs_override" />
+
     <!-- Alert Slider -->
     <java-symbol type="string" name="alert_slider_state_path" />
     <java-symbol type="string" name="alert_slider_uevent_match_path" />
diff --git a/services/core/java/com/android/server/custom/CustomDeviceConfigService.java b/services/core/java/com/android/server/custom/CustomDeviceConfigService.java
new file mode 100644
index 000000000000..08eac2236201
--- /dev/null
+++ b/services/core/java/com/android/server/custom/CustomDeviceConfigService.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2023 The PixelExperience Project
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+package com.android.server.custom;
+
+import android.content.Context;
+import com.android.server.SystemService;
+
+import com.android.internal.util.custom.DeviceConfigUtils;
+
+public class CustomDeviceConfigService extends SystemService {
+
+    private static final String TAG = "CustomDeviceConfigService";
+
+    private final Context mContext;
+
+    public CustomDeviceConfigService(Context context) {
+        super(context);
+        mContext = context;
+    }
+
+    @Override
+    public void onStart() {
+    }
+
+    @Override
+    public void onBootPhase(int phase) {
+        if (phase == PHASE_BOOT_COMPLETED) {
+            DeviceConfigUtils.setDefaultProperties(null, null);
+        }
+    }
+}
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 08b412c7bc51..5431af91d40b 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -129,6 +129,7 @@ import com.android.server.connectivity.PacProxyService;
 import com.android.server.contentcapture.ContentCaptureManagerInternal;
 import com.android.server.coverage.CoverageService;
 import com.android.server.cpu.CpuMonitorService;
+import com.android.server.custom.CustomDeviceConfigService;
 import com.android.server.devicepolicy.DevicePolicyManagerService;
 import com.android.server.display.DcDimmingService;
 import com.android.server.devicestate.DeviceStateManagerService;
@@ -2656,6 +2657,12 @@ public final class SystemServer implements Dumpable {
                 mSystemServiceManager.startService(PocketBridgeService.class);
                 t.traceEnd();
             }
+
+            // CustomDeviceConfigService
+            t.traceBegin("StartCustomDeviceConfigService");
+            mSystemServiceManager.startService(CustomDeviceConfigService.class);
+            t.traceEnd();
+
         }
 
         t.traceBegin("StartMediaProjectionManager");
-- 
2.43.0


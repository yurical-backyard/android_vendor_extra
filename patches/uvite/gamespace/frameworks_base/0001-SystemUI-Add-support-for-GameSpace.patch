From c66dbe5de37f1bc2c4911d0bc5f866d595fdc47f Mon Sep 17 00:00:00 2001
From: Nauval Rizky <enuma.alrizky@gmail.com>
Date: Mon, 27 Dec 2021 17:05:57 +0700
Subject: [PATCH] SystemUI: Add support for GameSpace

This is an addon for GameSpace for broadcasting about game start/stop.
Additionally, it also has special option for suppressing fullscreen
intent like incoming call.

This also squash commits:
- SystemUI: Improve GameSpace lifecycle and broadcast handling
- GameSpaceManager: Handle various case against "locking screen" scenario
- GameSpace: Fix issue with multiple users [neobuddy89]
- SystemUI: Update gamespace for A13 [Genkzsz11]
- GameSpaceManager: restrict broadcast to MANAGE_GAME_MODE holders only
- GameSpaceManager: Update TaskStack listener usage
- SystemUI: Adapt GameSpace for 14 QPR1 [aswin7469]

Change-Id: Ie865afb849b277b56df3a76213a92ead5349013e
Signed-off-by: Gustavo Mendes <gusttavo.me@outlook.com>
---
 core/java/android/provider/Settings.java      |  14 ++
 core/res/AndroidManifest.xml                  |   4 +
 packages/SystemUI/AndroidManifest.xml         |   3 +
 .../statusbar/phone/CentralSurfaces.java      |   3 +
 .../statusbar/phone/CentralSurfacesImpl.java  |  10 ++
 .../StatusBarNotificationActivityStarter.java |  10 +-
 .../statusbar/policy/GameSpaceManager.kt      | 158 ++++++++++++++++++
 7 files changed, 201 insertions(+), 1 deletion(-)
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/policy/GameSpaceManager.kt

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index a505d06edb1d..29e34fe3dae3 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -5698,6 +5698,20 @@ public final class Settings {
         @Readable
         public static final String POINTER_SPEED = "pointer_speed";
 
+        /**
+         * GameSpace: List of added games by user
+         * @hide
+         */
+        @Readable
+        public static final String GAMESPACE_GAME_LIST = "gamespace_game_list";
+
+        /**
+         * GameSpace: Whether fullscreen intent will be suppressed while in game session
+         * @hide
+         */
+        @Readable
+        public static final String GAMESPACE_SUPPRESS_FULLSCREEN_INTENT = "gamespace_suppress_fullscreen_intent";
+
         /**
          * Touchpad pointer speed setting.
          * This is an integer value in a range between -7 and +7, so there are 15 possible values.
diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index 98b2d15f6104..854c1bb8ae60 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -876,6 +876,10 @@
     <protected-broadcast android:name="android.app.admin.action.DEVICE_POLICY_SET_RESULT" />
     <protected-broadcast android:name="android.app.admin.action.DEVICE_POLICY_CHANGED" />
 
+    <!-- GameSpace -->
+    <protected-broadcast android:name="io.chaldeaprjkt.gamespace.action.GAME_START" />
+    <protected-broadcast android:name="io.chaldeaprjkt.gamespace.action.GAME_STOP" />
+
     <!-- ====================================================================== -->
     <!--                          RUNTIME PERMISSIONS                           -->
     <!-- ====================================================================== -->
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 8cd00ae8fd95..3820406affe5 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -352,6 +352,9 @@
 
     <uses-permission android:name="android.permission.MONITOR_KEYBOARD_BACKLIGHT" />
 
+    <!-- To broadcast status of the GameSpaceManager -->
+    <uses-permission android:name="android.permission.MANAGE_GAME_MODE" />
+
     <protected-broadcast android:name="com.android.settingslib.action.REGISTER_SLICE_RECEIVER" />
     <protected-broadcast android:name="com.android.settingslib.action.UNREGISTER_SLICE_RECEIVER" />
     <protected-broadcast android:name="com.android.settings.flashlight.action.FLASHLIGHT_CHANGED" />
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfaces.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfaces.java
index af09bf281c0c..bd1b59dcdf30 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfaces.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfaces.java
@@ -46,6 +46,7 @@ import com.android.systemui.qs.QSPanelController;
 import com.android.systemui.shared.system.RemoteAnimationRunnerCompat;
 import com.android.systemui.statusbar.NotificationPresenter;
 import com.android.systemui.statusbar.notification.row.ExpandableNotificationRow;
+import com.android.systemui.statusbar.policy.GameSpaceManager;
 import com.android.systemui.util.Compile;
 
 import java.io.PrintWriter;
@@ -377,6 +378,8 @@ public interface CentralSurfaces extends Dumpable, LifecycleOwner {
 
     void extendDozePulse();
 
+    GameSpaceManager getGameSpaceManager();
+
     public static class KeyboardShortcutsMessage {
         final int mDeviceId;
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java
index 77d9ee62abce..aa6192f87a8c 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java
@@ -240,6 +240,7 @@ import com.android.systemui.statusbar.policy.ConfigurationController.Configurati
 import com.android.systemui.statusbar.policy.DeviceProvisionedController;
 import com.android.systemui.statusbar.policy.DeviceProvisionedController.DeviceProvisionedListener;
 import com.android.systemui.statusbar.policy.ExtensionController;
+import com.android.systemui.statusbar.policy.GameSpaceManager;
 import com.android.systemui.statusbar.policy.KeyguardStateController;
 import com.android.systemui.statusbar.policy.UserInfoControllerImpl;
 import com.android.systemui.statusbar.policy.UserSwitcherController;
@@ -482,6 +483,8 @@ public class CentralSurfacesImpl implements CoreStartable, CentralSurfaces {
     private final StatusBarHideIconsForBouncerManager mStatusBarHideIconsForBouncerManager;
     private final Lazy<LightRevealScrimViewModel> mLightRevealScrimViewModelLazy;
 
+    protected GameSpaceManager mGameSpaceManager;
+
     /** Controller for the Shade. */
     private final ShadeSurface mShadeSurface;
     private final ShadeLogger mShadeLogger;
@@ -907,6 +910,7 @@ public class CentralSurfacesImpl implements CoreStartable, CentralSurfaces {
 
         mActivityIntentHelper = new ActivityIntentHelper(mContext);
         mActivityLaunchAnimator = activityLaunchAnimator;
+        mGameSpaceManager = new GameSpaceManager(mContext, mKeyguardStateController);
 
         // The status bar background may need updating when the ongoing call status changes.
         mOngoingCallController.addCallback((animate) -> maybeUpdateBarMode());
@@ -1564,6 +1568,7 @@ public class CentralSurfacesImpl implements CoreStartable, CentralSurfaces {
         filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
         filter.addAction(Intent.ACTION_SCREEN_OFF);
         mBroadcastDispatcher.registerReceiver(mBroadcastReceiver, filter, null, UserHandle.ALL);
+        mGameSpaceManager.observe();
     }
 
     protected QS createDefaultQSFragment() {
@@ -3448,6 +3453,11 @@ public class CentralSurfacesImpl implements CoreStartable, CentralSurfaces {
 
     // End Extra BaseStatusBarMethods.
 
+    @Override
+    public GameSpaceManager getGameSpaceManager() {
+        return mGameSpaceManager;
+    }
+
     boolean isTransientShown() {
         return mTransientShown;
     }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarNotificationActivityStarter.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarNotificationActivityStarter.java
index 8de213f262c2..dc9f5b8de039 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarNotificationActivityStarter.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarNotificationActivityStarter.java
@@ -76,6 +76,7 @@ import com.android.systemui.statusbar.notification.row.ExpandableNotificationRow
 import com.android.systemui.statusbar.notification.row.ExpandableNotificationRowDragController;
 import com.android.systemui.statusbar.notification.row.OnUserInteractionCallback;
 import com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent;
+import com.android.systemui.statusbar.policy.GameSpaceManager;
 import com.android.systemui.statusbar.policy.HeadsUpUtil;
 import com.android.systemui.statusbar.policy.KeyguardStateController;
 import com.android.systemui.wmshell.BubblesManager;
@@ -122,7 +123,7 @@ class StatusBarNotificationActivityStarter implements NotificationActivityStarte
 
     private final MetricsLogger mMetricsLogger;
     private final StatusBarNotificationActivityStarterLogger mLogger;
-
+    private final CentralSurfaces mCentralSurfaces;
     private final NotificationPresenter mPresenter;
     private final ShadeViewController mShadeViewController;
     private final NotificationShadeWindowController mNotificationShadeWindowController;
@@ -159,6 +160,7 @@ class StatusBarNotificationActivityStarter implements NotificationActivityStarte
             ActivityIntentHelper activityIntentHelper,
             MetricsLogger metricsLogger,
             StatusBarNotificationActivityStarterLogger logger,
+	    CentralSurfaces centralSurfaces,
             OnUserInteractionCallback onUserInteractionCallback,
             NotificationPresenter presenter,
             ShadeViewController shadeViewController,
@@ -194,6 +196,7 @@ class StatusBarNotificationActivityStarter implements NotificationActivityStarte
         mFeatureFlags = featureFlags;
         mMetricsLogger = metricsLogger;
         mLogger = logger;
+        mCentralSurfaces = centralSurfaces;
         mOnUserInteractionCallback = onUserInteractionCallback;
         mPresenter = presenter;
         mShadeViewController = shadeViewController;
@@ -573,6 +576,11 @@ class StatusBarNotificationActivityStarter implements NotificationActivityStarte
 
     @VisibleForTesting
     void launchFullScreenIntent(NotificationEntry entry) {
+        GameSpaceManager gameSpace = mCentralSurfaces.getGameSpaceManager();
+        if (gameSpace != null && gameSpace.shouldSuppressFullScreenIntent()) {
+            return;
+        }
+
         // Skip if device is in VR mode.
         if (mPresenter.isDeviceInVrMode()) {
             mLogger.logFullScreenIntentSuppressedByVR(entry);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/GameSpaceManager.kt b/packages/SystemUI/src/com/android/systemui/statusbar/policy/GameSpaceManager.kt
new file mode 100644
index 000000000000..6628037f3d75
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/GameSpaceManager.kt
@@ -0,0 +1,158 @@
+/*
+ * Copyright (C) 2021 Chaldeaprjkt
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.systemui.statusbar.policy
+
+import android.app.ActivityTaskManager
+import android.content.BroadcastReceiver
+import android.content.ComponentName
+import android.content.Context
+import android.content.Intent
+import android.content.IntentFilter
+import android.os.Handler
+import android.os.Looper
+import android.os.Message
+import android.os.PowerManager
+import android.os.RemoteException
+import android.os.UserHandle
+import android.provider.Settings
+import com.android.systemui.dagger.SysUISingleton
+import com.android.systemui.shared.system.TaskStackChangeListener
+import com.android.systemui.shared.system.TaskStackChangeListeners
+
+import java.util.Arrays
+import javax.inject.Inject
+
+@SysUISingleton
+class GameSpaceManager @Inject constructor(
+    private val context: Context,
+    private val keyguardStateController: KeyguardStateController,
+) {
+    private val handler by lazy { GameSpaceHandler(Looper.getMainLooper()) }
+    private val taskManager by lazy { ActivityTaskManager.getService() }
+
+    private var activeGame: String? = null
+    private var isRegistered = false
+
+    private val taskStackChangeListener = object : TaskStackChangeListener {
+        override fun onTaskStackChanged() {
+            handler.sendEmptyMessage(MSG_UPDATE_FOREGROUND_APP)
+        }
+    }
+
+    private val interactivityReceiver = object : BroadcastReceiver() {
+        override fun onReceive(context: Context?, intent: Intent?) {
+            when (intent?.action) {
+                Intent.ACTION_SCREEN_OFF -> {
+                    activeGame = null
+                    handler.sendEmptyMessage(MSG_DISPATCH_FOREGROUND_APP)
+                }
+            }
+        }
+    }
+
+    private val keyguardStateCallback = object : KeyguardStateController.Callback {
+        override fun onKeyguardShowingChanged() {
+            if (keyguardStateController.isShowing) return
+            handler.sendEmptyMessage(MSG_UPDATE_FOREGROUND_APP)
+        }
+    }
+
+    private inner class GameSpaceHandler(looper: Looper?) : Handler(looper, null, true) {
+        override fun handleMessage(msg: Message) {
+            when (msg.what) {
+                MSG_UPDATE_FOREGROUND_APP -> checkForegroundApp()
+                MSG_DISPATCH_FOREGROUND_APP -> dispatchForegroundApp()
+            }
+        }
+    }
+
+    private fun checkForegroundApp() {
+        try {
+            val info = taskManager.focusedRootTaskInfo
+            info?.topActivity ?: return
+            val packageName = info.topActivity?.packageName
+            activeGame = checkGameList(packageName)
+            handler.sendEmptyMessage(MSG_DISPATCH_FOREGROUND_APP)
+        } catch (e: RemoteException) {
+        }
+    }
+
+    private fun dispatchForegroundApp() {
+        val pm = context.getSystemService(Context.POWER_SERVICE) as PowerManager
+        if (!pm.isInteractive && activeGame != null) return
+        val action = if (activeGame != null) ACTION_GAME_START else ACTION_GAME_STOP
+        Intent(action).apply {
+            setPackage(GAMESPACE_PACKAGE)
+            component = ComponentName.unflattenFromString(RECEIVER_CLASS)
+            putExtra(EXTRA_CALLER_NAME, context.packageName)
+            if (activeGame != null) putExtra(EXTRA_ACTIVE_GAME, activeGame)
+            addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING
+                or Intent.FLAG_RECEIVER_FOREGROUND
+                or Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND)
+            context.sendBroadcastAsUser(this, UserHandle.CURRENT,
+                android.Manifest.permission.MANAGE_GAME_MODE)
+        }
+    }
+
+    fun observe() {
+        val taskStackChangeListeners = TaskStackChangeListeners.getInstance();
+        if (isRegistered) {
+            taskStackChangeListeners.unregisterTaskStackListener(taskStackChangeListener)
+        }
+        taskStackChangeListeners.registerTaskStackListener(taskStackChangeListener)
+        isRegistered = true;
+        handler.sendEmptyMessage(MSG_UPDATE_FOREGROUND_APP)
+        context.registerReceiver(interactivityReceiver, IntentFilter().apply {
+            addAction(Intent.ACTION_SCREEN_OFF)
+        })
+        keyguardStateController.addCallback(keyguardStateCallback)
+    }
+
+    fun isGameActive() = activeGame != null
+
+    fun shouldSuppressFullScreenIntent() =
+        Settings.System.getIntForUser(
+            context.contentResolver,
+            Settings.System.GAMESPACE_SUPPRESS_FULLSCREEN_INTENT, 0,
+            UserHandle.USER_CURRENT) == 1 && isGameActive()
+
+    private fun checkGameList(packageName: String?): String? {
+        packageName ?: return null
+        val games = Settings.System.getStringForUser(
+            context.contentResolver,
+            Settings.System.GAMESPACE_GAME_LIST,
+            UserHandle.USER_CURRENT)
+
+        if (games.isNullOrEmpty())
+            return null
+
+        return games.split(";")
+            .map { it.split("=").first() }
+            .firstOrNull { it == packageName }
+    }
+
+    companion object {
+        private const val ACTION_GAME_START = "io.chaldeaprjkt.gamespace.action.GAME_START"
+        private const val ACTION_GAME_STOP = "io.chaldeaprjkt.gamespace.action.GAME_STOP"
+        private const val GAMESPACE_PACKAGE = "io.chaldeaprjkt.gamespace"
+        private const val RECEIVER_CLASS = "io.chaldeaprjkt.gamespace/.gamebar.GameBroadcastReceiver"
+        private const val EXTRA_CALLER_NAME = "source"
+        private const val EXTRA_ACTIVE_GAME = "package_name"
+        private const val MSG_UPDATE_FOREGROUND_APP = 0
+        private const val MSG_DISPATCH_FOREGROUND_APP = 1
+    }
+}
-- 
2.43.0


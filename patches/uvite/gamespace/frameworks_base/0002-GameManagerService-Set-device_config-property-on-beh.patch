From 64b704c1897c8eee5829aa4fbb49a1e8b303d2d5 Mon Sep 17 00:00:00 2001
From: Dhina17 <dhinalogu@gmail.com>
Date: Fri, 15 Sep 2023 14:18:30 +0530
Subject: [PATCH] GameManagerService: Set device_config property on behalf
 of GameSpace

GTS don't allow any app to have the android.permission.WRITE_DEVICE_CONFIG permission
i.e we can't modify device_config property from our game space.

So write the property to our custom Settings.Secure.GAME_OVERLAY.
Then observe the value changes and set the property to the
device_config from here.

Since GameManagerService is a part of system_server,
GTS will be happy.

Change-Id: I0ebbcd6188411a583fa53904e6153482f342a03e
Signed-off-by: Gustavo Mendes <gusttavo.me@outlook.com>
---
 core/java/android/provider/Settings.java      |  9 ++++
 .../server/app/GameManagerService.java        | 46 +++++++++++++++++++
 2 files changed, 55 insertions(+)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 29e34fe3dae3..1519bd426425 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -11861,6 +11861,15 @@ public final class Settings {
          */
         public static final String SYSTEM_BLACK_THEME = "system_black_theme";
 
+        /**
+         * Our GameSpace can't write to device_config directly [GTS]
+         * Use this as intermediate to pass device_config property
+         * from our GameSpace to com.android.server.app.GameManagerService
+         * so we can set the device_config property from there.
+         * @hide
+         */
+        public static final String GAME_OVERLAY = "game_overlay";
+
         /**
          * Keys we no longer back up under the current schema, but want to continue to
          * process when restoring historical backup datasets.
diff --git a/services/core/java/com/android/server/app/GameManagerService.java b/services/core/java/com/android/server/app/GameManagerService.java
index 675bb87b58cd..49748455fdb0 100644
--- a/services/core/java/com/android/server/app/GameManagerService.java
+++ b/services/core/java/com/android/server/app/GameManagerService.java
@@ -45,6 +45,7 @@ import android.app.IGameStateListener;
 import android.app.StatsManager;
 import android.app.UidObserver;
 import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
@@ -56,6 +57,7 @@ import android.content.pm.UserInfo;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.content.res.XmlResourceParser;
+import android.database.ContentObserver;
 import android.hardware.power.Mode;
 import android.net.Uri;
 import android.os.Binder;
@@ -71,9 +73,11 @@ import android.os.Process;
 import android.os.RemoteException;
 import android.os.ResultReceiver;
 import android.os.ShellCallback;
+import android.os.UserHandle;
 import android.os.UserManager;
 import android.provider.DeviceConfig;
 import android.provider.DeviceConfig.Properties;
+import android.provider.Settings;
 import android.text.TextUtils;
 import android.util.ArrayMap;
 import android.util.AtomicFile;
@@ -1518,6 +1522,11 @@ public final class GameManagerService extends IGameManagerService.Stub {
                 }
             }
         }, new IntentFilter(Intent.ACTION_SHUTDOWN));
+
+        // Start to observe our Settings.Secure.GAME_OVERLAY
+        // after boot completed.
+        new SettingsObserver(mHandler);
+
         Slog.v(TAG, "Game loading power mode OFF (game manager service start/restart)");
         mPowerManagerInternal.setPowerMode(Mode.GAME_LOADING, false);
         Slog.v(TAG, "Game power mode OFF (game manager service start/restart)");
@@ -2222,4 +2231,41 @@ public final class GameManagerService extends IGameManagerService.Stub {
             }
         }
     }
+
+    class SettingsObserver extends ContentObserver {
+
+        private final ContentResolver mContentResolver;
+
+        SettingsObserver(Handler handler) {
+            super(handler);
+            mContentResolver = mContext.getContentResolver();
+            mContentResolver.registerContentObserver(Settings.Secure.getUriFor(
+                    Settings.Secure.GAME_OVERLAY), false, this,
+                    UserHandle.USER_ALL);
+            }
+
+        @Override
+        public void onChange(boolean selfChange, Uri uri) {
+            String newValue = Settings.Secure.getString(mContentResolver,
+                    Settings.Secure.GAME_OVERLAY);
+            // We write key and value of the device_config property as a single string
+            // from our GameSpace.
+            // ';;' is the separator betweeen key and value.
+            // Example: com.libremobileos.game;;mode=2,downscaleFactor=0.7:mode=3,downscaleFactor=0.8
+            // So split the key and value from the string
+            // and set the device_config propery.
+            String[] parsedValues = newValue.split(";;");
+            // Value should contain both package name and config.
+            // Otherwise don't do anything.
+            if (parsedValues.length < 2) return;
+            // We don't need to care about any format and all.
+            // It will be handled by the GamePackageConfiguration while
+            // parsing the device_config property.
+            String packageName = parsedValues[0];
+            String configValue = parsedValues[1];
+            DeviceConfig.setProperty(DeviceConfig.NAMESPACE_GAME_OVERLAY,
+                    packageName, configValue, false);
+        }
+    }
+
 }
-- 
2.43.0


From 54854da9972f832cc7b553b1dfe953f187f726c8 Mon Sep 17 00:00:00 2001
From: cjybyjk <cjybyjk@zjnu.edu.cn>
Date: Wed, 7 Jul 2021 22:07:55 +0800
Subject: [PATCH] SystemUI: Export RecordingService for External Usage

[nullxception: simplify start handling and adapt it to 12L]
[neobuddy89: Adapted to 13]

Change-Id: I58be35cce6bf5a9706fce89327df5e215ca3f9bc
---
 packages/SystemUI/AndroidManifest.xml         | 11 ++-
 .../screenrecord/IRecordingCallback.aidl      |  6 ++
 .../screenrecord/IRemoteRecording.aidl        | 12 +++
 .../screenrecord/RecordingService.java        | 81 ++++++++++++++++++-
 .../screenrecord/ScreenRecordDialog.java      |  2 +-
 5 files changed, 109 insertions(+), 3 deletions(-)
 create mode 100644 packages/SystemUI/src/com/android/systemui/screenrecord/IRecordingCallback.aidl
 create mode 100644 packages/SystemUI/src/com/android/systemui/screenrecord/IRemoteRecording.aidl

diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 3820406affe5..d19e94beab42 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -204,6 +204,9 @@
     <permission android:name="android.permission.CUSTOMIZE_SYSTEM_UI"
         android:protectionLevel="signature|privileged" />
 
+    <permission android:name="com.android.systemui.permission.SCREEN_RECORDING"
+            android:protectionLevel="signature" />
+
     <!-- Adding Quick Settings tiles -->
     <uses-permission android:name="android.permission.BIND_QUICK_SETTINGS_TILE" />
 
@@ -478,7 +481,13 @@
             android:permission="android.permission.LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE" />
 
         <service android:name=".screenrecord.RecordingService"
-                 android:foregroundServiceType="systemExempted"/>
+            android:foregroundServiceType="systemExempted"
+            android:exported="true"
+            android:permission="com.android.systemui.permission.SCREEN_RECORDING">
+            <intent-filter>
+                <action android:name="com.android.systemui.screenrecord.RecordingService" />
+            </intent-filter>
+        </service>
 
         <receiver android:name=".SysuiRestartReceiver"
             android:exported="false">
diff --git a/packages/SystemUI/src/com/android/systemui/screenrecord/IRecordingCallback.aidl b/packages/SystemUI/src/com/android/systemui/screenrecord/IRecordingCallback.aidl
new file mode 100644
index 000000000000..ee4a46393989
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/screenrecord/IRecordingCallback.aidl
@@ -0,0 +1,6 @@
+package com.android.systemui.screenrecord;
+
+interface IRecordingCallback {
+    void onRecordingStart();
+    void onRecordingEnd();
+}
diff --git a/packages/SystemUI/src/com/android/systemui/screenrecord/IRemoteRecording.aidl b/packages/SystemUI/src/com/android/systemui/screenrecord/IRemoteRecording.aidl
new file mode 100644
index 000000000000..13cbf8dfb39b
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/screenrecord/IRemoteRecording.aidl
@@ -0,0 +1,12 @@
+package com.android.systemui.screenrecord;
+
+import com.android.systemui.screenrecord.IRecordingCallback;
+
+interface IRemoteRecording {
+    void startRecording();
+    void stopRecording();
+    boolean isRecording();
+    boolean isStarting();
+    void addRecordingCallback(in IRecordingCallback callback);
+    void removeRecordingCallback(in IRecordingCallback callback);
+}
diff --git a/packages/SystemUI/src/com/android/systemui/screenrecord/RecordingService.java b/packages/SystemUI/src/com/android/systemui/screenrecord/RecordingService.java
index ca072bf565ec..89ce70dfee69 100644
--- a/packages/SystemUI/src/com/android/systemui/screenrecord/RecordingService.java
+++ b/packages/SystemUI/src/com/android/systemui/screenrecord/RecordingService.java
@@ -24,6 +24,7 @@ import android.app.PendingIntent;
 import android.app.Service;
 import android.content.ContentResolver;
 import android.content.Context;
+import android.content.ComponentName;
 import android.content.Intent;
 import android.content.res.Resources;
 import android.graphics.Bitmap;
@@ -52,6 +53,7 @@ import com.android.systemui.settings.UserContextProvider;
 import com.android.systemui.statusbar.phone.KeyguardDismissUtil;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.concurrent.Executor;
 
 import javax.inject.Inject;
@@ -80,10 +82,12 @@ public class RecordingService extends Service implements ScreenMediaRecorderList
     private static final String ACTION_STOP = "com.android.systemui.screenrecord.STOP";
     private static final String ACTION_STOP_NOTIF =
             "com.android.systemui.screenrecord.STOP_FROM_NOTIF";
+    private static final String ACTION_SHOW_DIALOG = "com.android.systemui.screenrecord.SHOW_DIALOG";
     private static final String ACTION_SHARE = "com.android.systemui.screenrecord.SHARE";
     private static final String ACTION_DELETE = "com.android.systemui.screenrecord.DELETE";
     private static final String PERMISSION_SELF = "com.android.systemui.permission.SELF";
 
+    private final RecordingServiceBinder mBinder;
     private final RecordingController mController;
     private final KeyguardDismissUtil mKeyguardDismissUtil;
     private final Handler mMainHandler;
@@ -109,6 +113,7 @@ public class RecordingService extends Service implements ScreenMediaRecorderList
         mNotificationManager = notificationManager;
         mUserContextTracker = userContextTracker;
         mKeyguardDismissUtil = keyguardDismissUtil;
+        mBinder = new RecordingServiceBinder();
     }
 
     /**
@@ -245,18 +250,30 @@ public class RecordingService extends Service implements ScreenMediaRecorderList
                 // Close quick shade
                 maybeCloseSystemDialogs();
                 break;
+            case ACTION_SHOW_DIALOG:
+                if (mController != null) {
+                    mController.createScreenRecordDialog(this, null, null, null, null).show();
+                }
+                break;
         }
         return Service.START_STICKY;
     }
 
     @Override
     public IBinder onBind(Intent intent) {
-        return null;
+        return mBinder;
     }
 
     @Override
     public void onCreate() {
         super.onCreate();
+        mController.addCallback((RecordingController.RecordingStateChangeCallback) mBinder);
+    }
+
+    @Override
+    public void onDestroy() {
+        mController.removeCallback((RecordingController.RecordingStateChangeCallback) mBinder);
+        super.onDestroy();
     }
 
     @VisibleForTesting
@@ -587,4 +604,66 @@ public class RecordingService extends Service implements ScreenMediaRecorderList
             stopService();
         }
     }
+
+    private class RecordingServiceBinder extends IRemoteRecording.Stub
+            implements RecordingController.RecordingStateChangeCallback {
+
+        private ArrayList<IRecordingCallback> mCallbackList = new ArrayList<>();
+
+        @Override
+        public void startRecording() throws RemoteException {
+            Intent intent = new Intent(RecordingService.this, RecordingService.class);
+            intent.setAction(ACTION_SHOW_DIALOG);
+            RecordingService.this.startService(intent);
+        }
+
+        @Override
+        public void stopRecording() throws RemoteException {
+            Intent intent = new Intent(RecordingService.this, RecordingService.class);
+            intent.setAction(ACTION_STOP_NOTIF);
+            RecordingService.this.startService(intent);
+        }
+
+        @Override
+        public boolean isRecording() throws RemoteException {
+            return mController.isRecording();
+        }
+
+        @Override
+        public boolean isStarting() throws RemoteException {
+            return mController.isStarting();
+        }
+
+        public void addRecordingCallback(IRecordingCallback callback) throws RemoteException {
+            if (!mCallbackList.contains(callback)) {
+                mCallbackList.add(callback);
+            }
+        }
+
+        public void removeRecordingCallback(IRecordingCallback callback) throws RemoteException {
+            mCallbackList.remove(callback);
+        }
+
+        @Override
+        public void onRecordingStart() {
+            for (IRecordingCallback callback : mCallbackList) {
+                try {
+                    callback.onRecordingStart();
+                } catch (RemoteException e) {
+                    // do nothing
+                }
+            }
+        }
+
+        @Override
+        public void onRecordingEnd() {
+            for (IRecordingCallback callback : mCallbackList) {
+                try {
+                    callback.onRecordingEnd();
+                } catch (RemoteException e) {
+                    // do nothing
+                }
+            }
+        }
+    }
 }
diff --git a/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenRecordDialog.java b/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenRecordDialog.java
index 2a21aaa81404..3f5c6a95e540 100644
--- a/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenRecordDialog.java
+++ b/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenRecordDialog.java
@@ -120,7 +120,7 @@ public class ScreenRecordDialog extends SystemUIDialog {
             dismiss();
         });
 
-        if (mFlags.isEnabled(Flags.WM_ENABLE_PARTIAL_SCREEN_SHARING)) {
+        if (mFlags != null && mFlags.isEnabled(Flags.WM_ENABLE_PARTIAL_SCREEN_SHARING)) {
             TextView appBtn = findViewById(R.id.button_app);
 
             appBtn.setVisibility(View.VISIBLE);
-- 
2.43.0


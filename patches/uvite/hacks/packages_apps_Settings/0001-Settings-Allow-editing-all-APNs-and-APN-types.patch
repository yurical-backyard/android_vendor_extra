From ee6f04cfd63adbaa26130a24dc8a6820b652833d Mon Sep 17 00:00:00 2001
From: Justin Crawford <Justin@stacksmash.net>
Date: Wed, 23 Feb 2022 06:57:47 +0800
Subject: [PATCH] Settings: Allow editing all APNs and APN types

As we are not subject to carrier pressure, allow the user to edit any APN and it's settings effectively ignoring carrier restrictions.

arcana edit: adapt it to a12, ps: this fixes apn crash on a12

Signed-off-by: Justin Crawford <Justin@stacksmash.net>
---
 .../settings/network/apn/ApnEditor.java       | 69 ++-----------------
 .../settings/network/apn/ApnSettings.java     | 21 ++----
 2 files changed, 8 insertions(+), 82 deletions(-)

diff --git a/src/com/android/settings/network/apn/ApnEditor.java b/src/com/android/settings/network/apn/ApnEditor.java
index e38f3ce6405..51b60c82d22 100644
--- a/src/com/android/settings/network/apn/ApnEditor.java
+++ b/src/com/android/settings/network/apn/ApnEditor.java
@@ -142,15 +142,11 @@ public class ApnEditor extends SettingsPreferenceFragment
     private String mMvnoTypeStr;
     private String mMvnoMatchDataStr;
     @VisibleForTesting
-    String[] mReadOnlyApnTypes;
-    @VisibleForTesting
     String[] mDefaultApnTypes;
     @VisibleForTesting
     String mDefaultApnProtocol;
     @VisibleForTesting
     String mDefaultApnRoamingProtocol;
-    private String[] mReadOnlyApnFields;
-    private boolean mReadOnlyApn;
     /**
      * The APN deletion feature within menu is aligned with the APN adding feature.
      * Having only one of them could lead to a UX which not that make sense from user's
@@ -367,19 +363,6 @@ public class ApnEditor extends SettingsPreferenceFragment
                 Telephony.Carriers.USER_EDITED) == Telephony.Carriers.USER_EDITED;
 
         Log.d(TAG, "onCreate: EDITED " + isUserEdited);
-        // if it's not a USER_EDITED apn, check if it's read-only
-        if (!isUserEdited && (mApnData.getInteger(USER_EDITABLE_INDEX, 1) == 0
-                || apnTypesMatch(mReadOnlyApnTypes, mApnData.getString(TYPE_INDEX)))) {
-            Log.d(TAG, "onCreate: apnTypesMatch; read-only APN");
-            mReadOnlyApn = true;
-            disableAllFields();
-        } else if (!ArrayUtils.isEmpty(mReadOnlyApnFields)) {
-            disableFields(mReadOnlyApnFields);
-        }
-        // Make sure that a user cannot break carrier id APN matching
-        if (mIsCarrierIdApn) {
-            disableFieldsForCarrieridApn();
-        }
 
         for (int i = 0; i < getPreferenceScreen().getPreferenceCount(); i++) {
             getPreferenceScreen().getPreference(i).setOnPreferenceChangeListener(this);
@@ -764,10 +747,7 @@ public class ApnEditor extends SettingsPreferenceFragment
             return null;
         } else {
             final String[] values = getResources().getStringArray(R.array.mvno_type_entries);
-            final boolean mvnoMatchDataUneditable =
-                    mReadOnlyApn || (mReadOnlyApnFields != null
-                            && Arrays.asList(mReadOnlyApnFields)
-                            .contains(Telephony.Carriers.MVNO_MATCH_DATA));
+            final boolean mvnoMatchDataUneditable = false;
             mMvnoMatchData.setEnabled(!mvnoMatchDataUneditable && mvnoIndex != 0);
             if (newValue != null && !newValue.equals(oldValue)) {
                 if (values[mvnoIndex].equals("SPN")) {
@@ -880,14 +860,12 @@ public class ApnEditor extends SettingsPreferenceFragment
         super.onCreateOptionsMenu(menu, inflater);
         // If it's a new APN, then cancel will delete the new entry in onPause
         // If APN add is not allowed, delete might lead to issue regarding recovery
-        if (!mNewApn && !mReadOnlyApn && mIsAddApnAllowed) {
+        if (!mNewApn && mIsAddApnAllowed) {
             menu.add(0, MENU_DELETE, 0, R.string.menu_delete)
                 .setIcon(R.drawable.ic_delete);
         }
-        if (!mReadOnlyApn) {
-            menu.add(0, MENU_SAVE, 0, R.string.menu_save)
+        menu.add(0, MENU_SAVE, 0, R.string.menu_save)
                 .setIcon(android.R.drawable.ic_menu_save);
-        }
         menu.add(0, MENU_CANCEL, 0, R.string.menu_cancel)
             .setIcon(android.R.drawable.ic_menu_close_clear_cancel);
     }
@@ -1005,10 +983,6 @@ public class ApnEditor extends SettingsPreferenceFragment
      */
     @VisibleForTesting
     boolean validateAndSaveApnData() {
-        // Nothing to do if it's a read only APN
-        if (mReadOnlyApn) {
-            return true;
-        }
 
         final String name = checkNotSet(mName.getText());
         final String apn = checkNotSet(mApn.getText());
@@ -1239,25 +1213,6 @@ public class ApnEditor extends SettingsPreferenceFragment
             errorMsg = getResources().getString(R.string.error_mnc_not23);
         }
 
-        if (errorMsg == null) {
-            // if carrier does not allow editing certain apn types, make sure type does not include
-            // those
-            if (!ArrayUtils.isEmpty(mReadOnlyApnTypes)
-                    && apnTypesMatch(mReadOnlyApnTypes, getUserEnteredApnType())) {
-                final StringBuilder stringBuilder = new StringBuilder();
-                for (String type : mReadOnlyApnTypes) {
-                    stringBuilder.append(type).append(", ");
-                    Log.d(TAG, "validateApnData: appending type: " + type);
-                }
-                // remove last ", "
-                if (stringBuilder.length() >= 2) {
-                    stringBuilder.delete(stringBuilder.length() - 2, stringBuilder.length());
-                }
-                errorMsg = String.format(getResources().getString(R.string.error_adding_apn_type),
-                        stringBuilder);
-            }
-        }
-
         return errorMsg;
     }
 
@@ -1372,12 +1327,10 @@ public class ApnEditor extends SettingsPreferenceFragment
 
     private String getEditableApnType(String[] apnTypeList) {
         final StringBuilder editableApnTypes = new StringBuilder();
-        final List<String> readOnlyApnTypes = Arrays.asList(mReadOnlyApnTypes);
         boolean first = true;
         for (String apnType : apnTypeList) {
             // add APN type if it is not read-only and is not wild-cardable
-            if (!readOnlyApnTypes.contains(apnType)
-                    && !apnType.equals(APN_TYPE_IA)
+            if (!apnType.equals(APN_TYPE_IA)
                     && !apnType.equals(APN_TYPE_EMERGENCY)
                     && !apnType.equals(APN_TYPE_MCX)
                     && !apnType.equals(APN_TYPE_IMS)) {
@@ -1420,9 +1373,6 @@ public class ApnEditor extends SettingsPreferenceFragment
 
     @VisibleForTesting
     protected void getCarrierCustomizedConfig(Context context) {
-        mReadOnlyApn = false;
-        mReadOnlyApnTypes = null;
-        mReadOnlyApnFields = null;
         mIsAddApnAllowed = true;
 
         final CarrierConfigManager configManager = (CarrierConfigManager)
@@ -1430,17 +1380,6 @@ public class ApnEditor extends SettingsPreferenceFragment
         if (configManager != null) {
             final PersistableBundle b = configManager.getConfigForSubId(mSubId);
             if (b != null) {
-                mReadOnlyApnTypes = b.getStringArray(
-                        CarrierConfigManager.KEY_READ_ONLY_APN_TYPES_STRING_ARRAY);
-                if (!ArrayUtils.isEmpty(mReadOnlyApnTypes)) {
-                    Log.d(TAG,
-                            "onCreate: read only APN type: " + Arrays.toString(mReadOnlyApnTypes));
-                }
-                mReadOnlyApnFields = b.getStringArray(
-                        CarrierConfigManager.KEY_READ_ONLY_APN_FIELDS_STRING_ARRAY);
-
-                mDefaultApnTypes = b.getStringArray(
-                        CarrierConfigManager.KEY_APN_SETTINGS_DEFAULT_APN_TYPES_STRING_ARRAY);
 
                 if (!ArrayUtils.isEmpty(mDefaultApnTypes)) {
                     Log.d(TAG, "onCreate: default apn types: " + Arrays.toString(mDefaultApnTypes));
diff --git a/src/com/android/settings/network/apn/ApnSettings.java b/src/com/android/settings/network/apn/ApnSettings.java
index 7b9be109a7b..70f6832a9f4 100755
--- a/src/com/android/settings/network/apn/ApnSettings.java
+++ b/src/com/android/settings/network/apn/ApnSettings.java
@@ -146,7 +146,6 @@ public class ApnSettings extends RestrictedSettingsFragment
     private boolean mUnavailable;
 
     private boolean mHideImsApn;
-    private boolean mAllowAddingApns;
     private boolean mHidePresetApnDetails;
 
     private String[] mHideApnsWithRule;
@@ -261,7 +260,6 @@ public class ApnSettings extends RestrictedSettingsFragment
                 getSystemService(Context.CARRIER_CONFIG_SERVICE);
         final PersistableBundle b = configManager.getConfigForSubId(mSubId);
         mHideImsApn = b.getBoolean(CarrierConfigManager.KEY_HIDE_IMS_APN_BOOL);
-        mAllowAddingApns = b.getBoolean(CarrierConfigManager.KEY_ALLOW_ADDING_APNS_BOOL);
 
         mHideApnsWithRule = b.getStringArray(APN_HIDE_RULE_STRINGS_ARRAY);
         mHideApnsWithIccidRule = b.getStringArray(APN_HIDE_RULE_STRINGS_WITH_ICCIDS_ARRAY);
@@ -270,15 +268,6 @@ public class ApnSettings extends RestrictedSettingsFragment
            Log.d(TAG, "iccid: " + iccid);
            mHideApnsGroupByIccid = b.getPersistableBundle(iccid);
         }
-        if (mAllowAddingApns) {
-            final String[] readOnlyApnTypes = b.getStringArray(
-                    CarrierConfigManager.KEY_READ_ONLY_APN_TYPES_STRING_ARRAY);
-            // if no apn type can be edited, do not allow adding APNs
-            if (ApnEditor.hasAllApns(readOnlyApnTypes)) {
-                Log.d(TAG, "not allowing adding APN because all APN types are read only");
-                mAllowAddingApns = false;
-            }
-        }
         mHidePresetApnDetails = b.getBoolean(CarrierConfigManager.KEY_HIDE_PRESET_APN_DETAILS_BOOL);
         mUserManager = UserManager.get(activity);
     }
@@ -612,12 +601,10 @@ public class ApnSettings extends RestrictedSettingsFragment
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         if (!mUnavailable) {
-            if (mAllowAddingApns) {
-                menu.add(0, MENU_NEW, 0,
-                        getResources().getString(R.string.menu_new))
-                        .setIcon(R.drawable.ic_add_24dp)
-                        .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
-            }
+            menu.add(0, MENU_NEW, 0,
+                    getResources().getString(R.string.menu_new))
+                    .setIcon(R.drawable.ic_add_24dp)
+                    .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
             menu.add(0, MENU_RESTORE, 0,
                     getResources().getString(R.string.menu_restore))
                     .setIcon(android.R.drawable.ic_menu_upload);
-- 
2.43.0


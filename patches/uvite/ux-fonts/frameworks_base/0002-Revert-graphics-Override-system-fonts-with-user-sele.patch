From 2a2011646ffc8ac21e7da79c3a3bdf210b51adae Mon Sep 17 00:00:00 2001
From: Yurical <yurical1g@gmail.com>
Date: Fri, 29 Mar 2024 18:00:17 +0900
Subject: [PATCH] Revert "graphics: Override system fonts with
 user-selected overlays"

This reverts commit 1b8f45019d83354e639997de4b7ee4de9bce9dae.
---
 .../android/app/ConfigurationController.java  |  4 -
 core/res/res/values/aospa_symbols.xml         |  3 -
 graphics/java/android/graphics/Typeface.java  | 73 ++-----------------
 3 files changed, 7 insertions(+), 73 deletions(-)

diff --git a/core/java/android/app/ConfigurationController.java b/core/java/android/app/ConfigurationController.java
index a6f227c0465f..5636f6e4db39 100644
--- a/core/java/android/app/ConfigurationController.java
+++ b/core/java/android/app/ConfigurationController.java
@@ -28,9 +28,6 @@ import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.HardwareRenderer;
-import android.graphics.Typeface;
-import android.inputmethodservice.InputMethodService;
-import android.os.Build;
 import android.os.LocaleList;
 import android.os.Trace;
 import android.util.DisplayMetrics;
@@ -182,7 +179,6 @@ class ConfigurationController {
 
             final Application app = mActivityThread.getApplication();
             final Resources appResources = app.getResources();
-            Typeface.updateDefaultFont(appResources);
             mResourcesManager.applyConfigurationToResources(config, compat);
             updateLocaleListFromAppContext(app.getApplicationContext());
 
diff --git a/core/res/res/values/aospa_symbols.xml b/core/res/res/values/aospa_symbols.xml
index b7e66bcc931c..9d7f9324d0af 100644
--- a/core/res/res/values/aospa_symbols.xml
+++ b/core/res/res/values/aospa_symbols.xml
@@ -89,9 +89,6 @@
     <java-symbol type="array" name="config_globallyDisabledComponents" />
     <java-symbol type="array" name="config_forceEnabledComponents" />
 
-    <!-- For dynamic default font styles -->
-    <java-symbol type="string" name="config_bodyFontFamily" />
-
     <!-- Location indicator -->
     <java-symbol type="drawable" name="stat_sys_location" />
 
diff --git a/graphics/java/android/graphics/Typeface.java b/graphics/java/android/graphics/Typeface.java
index 4e3455f06e4c..9fb627fcc501 100644
--- a/graphics/java/android/graphics/Typeface.java
+++ b/graphics/java/android/graphics/Typeface.java
@@ -29,7 +29,6 @@ import android.annotation.TestApi;
 import android.annotation.UiThread;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.res.AssetManager;
-import android.content.res.Resources;
 import android.graphics.fonts.Font;
 import android.graphics.fonts.FontFamily;
 import android.graphics.fonts.FontStyle;
@@ -70,13 +69,11 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
-import java.lang.reflect.Field;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -146,8 +143,6 @@ public class Typeface {
     private static final LruCache<String, Typeface> sDynamicTypefaceCache = new LruCache<>(16);
     private static final Object sDynamicCacheLock = new Object();
 
-    // For dynamic default font styles
-    private static final HashMap<String, Typeface> sSystemFontOverrides = new HashMap<>();
 
     @GuardedBy("SYSTEM_FONT_MAP_LOCK")
     static Typeface sDefaultTypeface;
@@ -901,7 +896,7 @@ public class Typeface {
      * @return The best matching typeface.
      */
     public static Typeface create(String familyName, @Style int style) {
-        return create(getSystemOverrideTypeface(familyName), style);
+        return create(getSystemDefaultTypeface(familyName), style);
     }
 
     /**
@@ -1217,11 +1212,6 @@ public class Typeface {
         mCleaner.run();
     }
 
-    private static Typeface getSystemOverrideTypeface(@NonNull String familyName) {
-        Typeface tf = sSystemFontOverrides.get(familyName);
-        return tf == null ? getSystemDefaultTypeface(familyName) : tf;
-    }
-
     private static Typeface getSystemDefaultTypeface(@NonNull String familyName) {
         Typeface tf = sSystemFontMap.get(familyName);
         return tf == null ? Typeface.DEFAULT : tf;
@@ -1403,60 +1393,6 @@ public class Typeface {
         }
     }
 
-    private static void setPublicDefaults(String familyName) {
-        synchronized (SYSTEM_FONT_MAP_LOCK) {
-            sDefaults = new Typeface[] {
-                DEFAULT,
-                DEFAULT_BOLD,
-                create(getSystemDefaultTypeface(familyName), Typeface.ITALIC),
-                create(getSystemDefaultTypeface(familyName), Typeface.BOLD_ITALIC),
-            };
-        }
-    }
-
-    private static void setFinalField(String fieldName, Typeface value) {
-        synchronized (SYSTEM_FONT_MAP_LOCK) {
-            try {
-                Field field = Typeface.class.getDeclaredField(fieldName);
-                // isAccessible bypasses final on ART
-                field.setAccessible(true);
-                field.set(null, value);
-                field.setAccessible(false);
-            } catch (NoSuchFieldException | IllegalAccessException e) {
-                Log.e(TAG, "Failed to set Typeface." + fieldName, e);
-            }
-        }
-    }
-
-    /** @hide */
-    public static void updateDefaultFont(Resources res) {
-        synchronized (SYSTEM_FONT_MAP_LOCK) {
-            String familyName = res.getString(com.android.internal.R.string.config_bodyFontFamily);
-            Typeface typeface = sSystemFontMap.get(familyName);
-            if (typeface == null) {
-                // This should never happen, but if the system font family name is invalid, just return
-                // instead of crashing the app.
-                return;
-            }
-
-            setDefault(typeface);
-
-            // Static typefaces in public API
-            setFinalField("DEFAULT", create(getSystemDefaultTypeface(familyName), 0));
-            setFinalField("DEFAULT_BOLD", create(getSystemDefaultTypeface(familyName), Typeface.BOLD));
-            setFinalField("SANS_SERIF", DEFAULT);
-
-            // For default aliases used in framework styles
-            sSystemFontOverrides.put("sans-serif", typeface);
-            sSystemFontOverrides.put("sans-serif-thin", create(typeface, 100, false));
-            sSystemFontOverrides.put("sans-serif-light", create(typeface, 300, false));
-            sSystemFontOverrides.put("sans-serif-medium", create(typeface, 500, false));
-            sSystemFontOverrides.put("sans-serif-black", create(typeface, 900, false));
-
-            setPublicDefaults(familyName);
-        }
-    }
-
     /** @hide */
     @VisibleForTesting
     public static void setSystemFontMap(Map<String, Typeface> systemFontMap) {
@@ -1477,7 +1413,12 @@ public class Typeface {
             nativeForceSetStaticFinalField("SERIF", create("serif", 0));
             nativeForceSetStaticFinalField("MONOSPACE", create("monospace", 0));
 
-            setPublicDefaults(null);
+            sDefaults = new Typeface[]{
+                DEFAULT,
+                DEFAULT_BOLD,
+                create((String) null, Typeface.ITALIC),
+                create((String) null, Typeface.BOLD_ITALIC),
+            };
 
             // A list of generic families to be registered in native.
             // https://www.w3.org/TR/css-fonts-4/#generic-font-families
-- 
2.43.0


From 4bc4c19a29425cbe9eb159ba9502194e7d6e4039 Mon Sep 17 00:00:00 2001
From: Joe Maples <joe@frap129.org>
Date: Tue, 16 Jan 2018 12:18:02 -0500
Subject: [PATCH] keyguard: Actually kill Fancy Colon

https://github.com/crdroidandroid/android_frameworks_base/commit/b670f4b2d1e66870b7d5b61d4f6cb371c7f5dbb0 claims to have done this, but it didnt

Change-Id: I4eefdf9dd8f1f48d793a371189d471a5282ea745
Signed-off-by: Joe Maples <joe@frap129.org>
---
 .../SystemUI/res-keyguard/values/strings.xml  |   3 -
 .../KeyguardClockAccessibilityDelegate.java   |  86 -------------
 .../android/keyguard/KeyguardStatusView.java  |   3 -
 ...eyguardClockAccessibilityDelegateTest.java | 114 ------------------
 4 files changed, 206 deletions(-)
 delete mode 100644 packages/SystemUI/src/com/android/keyguard/KeyguardClockAccessibilityDelegate.java
 delete mode 100644 packages/SystemUI/tests/src/com/android/keyguard/KeyguardClockAccessibilityDelegateTest.java

diff --git a/packages/SystemUI/res-keyguard/values/strings.xml b/packages/SystemUI/res-keyguard/values/strings.xml
index da7470149853..ae23bb919bb5 100644
--- a/packages/SystemUI/res-keyguard/values/strings.xml
+++ b/packages/SystemUI/res-keyguard/values/strings.xml
@@ -99,9 +99,6 @@
     <string name="keyguard_widget_12_hours_format" translatable="false">h:mm</string>
     <!-- Time format strings for fall-back clock widget -->
     <string name="keyguard_widget_24_hours_format" translatable="false">kk:mm</string>
-    <!-- The character used in keyguard_widget_12_hours_format and keyguard_widget_24_hours_format
-         to represent a ":". -->
-    <string name="keyguard_fancy_colon" translatable="false"></string>
 
     <!-- Accessibility description of the PIN password view. [CHAR_LIMIT=none] -->
     <string name="keyguard_accessibility_pin_area">PIN area</string>
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardClockAccessibilityDelegate.java b/packages/SystemUI/src/com/android/keyguard/KeyguardClockAccessibilityDelegate.java
deleted file mode 100644
index a78c293a65ac..000000000000
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardClockAccessibilityDelegate.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License
- */
-
-package com.android.keyguard;
-
-import android.content.Context;
-import android.text.TextUtils;
-import android.view.View;
-import android.view.accessibility.AccessibilityEvent;
-import android.view.accessibility.AccessibilityNodeInfo;
-import android.widget.TextView;
-
-import com.android.systemui.R;
-
-/**
- * Replaces fancy colons with regular colons. Only works on TextViews.
- */
-class KeyguardClockAccessibilityDelegate extends View.AccessibilityDelegate {
-    private final String mFancyColon;
-
-    public KeyguardClockAccessibilityDelegate(Context context) {
-        mFancyColon = context.getString(R.string.keyguard_fancy_colon);
-    }
-
-    @Override
-    public void onInitializeAccessibilityEvent(View host, AccessibilityEvent event) {
-        super.onInitializeAccessibilityEvent(host, event);
-        if (TextUtils.isEmpty(mFancyColon)) {
-            return;
-        }
-        CharSequence text = event.getContentDescription();
-        if (!TextUtils.isEmpty(text)) {
-            event.setContentDescription(replaceFancyColon(text));
-        }
-    }
-
-    @Override
-    public void onPopulateAccessibilityEvent(View host, AccessibilityEvent event) {
-        if (TextUtils.isEmpty(mFancyColon)) {
-            super.onPopulateAccessibilityEvent(host, event);
-        } else {
-            CharSequence text = ((TextView) host).getText();
-            if (!TextUtils.isEmpty(text)) {
-                event.getText().add(replaceFancyColon(text));
-            }
-        }
-    }
-
-    @Override
-    public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo info) {
-        super.onInitializeAccessibilityNodeInfo(host, info);
-        if (TextUtils.isEmpty(mFancyColon)) {
-            return;
-        }
-        if (!TextUtils.isEmpty(info.getText())) {
-            info.setText(replaceFancyColon(info.getText()));
-        }
-        if (!TextUtils.isEmpty(info.getContentDescription())) {
-            info.setContentDescription(replaceFancyColon(info.getContentDescription()));
-        }
-    }
-
-    private CharSequence replaceFancyColon(CharSequence text) {
-        if (TextUtils.isEmpty(mFancyColon)) {
-            return text;
-        }
-        return text.toString().replace(mFancyColon, ":");
-    }
-
-    public static boolean isNeeded(Context context) {
-        return !TextUtils.isEmpty(context.getString(R.string.keyguard_fancy_colon));
-    }
-}
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardStatusView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardStatusView.java
index 5774e42d2425..107a52e73528 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardStatusView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardStatusView.java
@@ -71,9 +71,6 @@ public class KeyguardStatusView extends GridLayout {
         mStatusViewContainer = findViewById(R.id.status_view_container);
 
         mClockView = findViewById(R.id.keyguard_clock_container);
-        if (KeyguardClockAccessibilityDelegate.isNeeded(mContext)) {
-            mClockView.setAccessibilityDelegate(new KeyguardClockAccessibilityDelegate(mContext));
-        }
 
         mKeyguardSlice = findViewById(R.id.keyguard_slice_view);
 
diff --git a/packages/SystemUI/tests/src/com/android/keyguard/KeyguardClockAccessibilityDelegateTest.java b/packages/SystemUI/tests/src/com/android/keyguard/KeyguardClockAccessibilityDelegateTest.java
deleted file mode 100644
index 00f88bfa2abb..000000000000
--- a/packages/SystemUI/tests/src/com/android/keyguard/KeyguardClockAccessibilityDelegateTest.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License
- */
-
-package com.android.keyguard;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-
-import android.text.TextUtils;
-import android.view.accessibility.AccessibilityEvent;
-import android.view.accessibility.AccessibilityNodeInfo;
-import android.widget.TextView;
-
-import androidx.test.filters.SmallTest;
-
-import com.android.systemui.R;
-import com.android.systemui.SysuiTestCase;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.List;
-
-@SmallTest
-public class KeyguardClockAccessibilityDelegateTest extends SysuiTestCase {
-
-    private TextView mView;
-    private String m12HoursFormat;
-    private String m24HoursFormat;
-
-    @Before
-    public void setUp() throws Exception {
-        m12HoursFormat = mContext.getString(R.string.keyguard_widget_12_hours_format);
-        m24HoursFormat = mContext.getString(R.string.keyguard_widget_24_hours_format);
-
-        mView = new TextView(mContext);
-        mView.setText(m12HoursFormat);
-        mView.setContentDescription(m12HoursFormat);
-        mView.setAccessibilityDelegate(new KeyguardClockAccessibilityDelegate(mContext));
-    }
-
-    @Test
-    public void onInitializeAccessibilityEvent_producesNonEmptyAsciiContentDesc() throws Exception {
-        AccessibilityEvent ev = AccessibilityEvent.obtain();
-        mView.onInitializeAccessibilityEvent(ev);
-
-        assertFalse(TextUtils.isEmpty(ev.getContentDescription()));
-        assertTrue(isAscii(ev.getContentDescription()));
-    }
-
-    @Test
-    public void onPopulateAccessibilityEvent_producesNonEmptyAsciiText() throws Exception {
-        AccessibilityEvent ev = AccessibilityEvent.obtain();
-        mView.onPopulateAccessibilityEvent(ev);
-
-        assertFalse(isEmpty(ev.getText()));
-        assertTrue(isAscii(ev.getText()));
-    }
-
-    @Test
-    public void onInitializeAccessibilityNodeInfo_producesNonEmptyAsciiText() throws Exception {
-        AccessibilityNodeInfo info = AccessibilityNodeInfo.obtain();
-        // Usually done in View.onInitializeAccessibilityNodeInfoInternal, but only when attached.
-        info.setContentDescription(mView.getContentDescription());
-        mView.onInitializeAccessibilityNodeInfo(info);
-
-        assertFalse(TextUtils.isEmpty(info.getText()));
-        assertTrue(isAscii(info.getText()));
-
-        assertFalse(TextUtils.isEmpty(info.getContentDescription()));
-        assertTrue(isAscii(info.getContentDescription()));
-    }
-
-    @Test
-    public void isNeeded_returnsTrueIfDateFormatsContainNonAscii() {
-        if (!isAscii(m12HoursFormat) || !isAscii(m24HoursFormat)) {
-            assertTrue(KeyguardClockAccessibilityDelegate.isNeeded(mContext));
-        }
-    }
-
-    @Test
-    public void isNeeded_returnsWhetherFancyColonExists() {
-        boolean hasFancyColon = !TextUtils.isEmpty(mContext.getString(
-                R.string.keyguard_fancy_colon));
-
-        assertEquals(hasFancyColon, KeyguardClockAccessibilityDelegate.isNeeded(mContext));
-    }
-
-    private boolean isAscii(CharSequence text) {
-        return text.chars().allMatch((i) -> i < 128);
-    }
-
-    private boolean isAscii(List<CharSequence> texts) {
-        return texts.stream().allMatch(this::isAscii);
-    }
-
-    private boolean isEmpty(List<CharSequence> texts) {
-        return texts.stream().allMatch(TextUtils::isEmpty);
-    }
-}
\ No newline at end of file
-- 
2.43.0


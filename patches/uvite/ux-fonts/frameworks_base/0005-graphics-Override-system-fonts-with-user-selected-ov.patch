From fc37c365522fcb79dc5632a05b0a8289341bbf00 Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Wed, 7 Jul 2021 21:22:35 -0700
Subject: [PATCH] graphics: Override system fonts with user-selected
 overlays

Only using user-selected fonts for a subset of system apps leads to an
inconsistent visual experience. While we've already applied them to the
system's Material UI themes, many apps have hard-code references to
sans-serif (whether it's through XML styles or Typeface.SANS_SERIF), so
it is also necessary to override Typeface fonts at runtime.

Changing overlays causes OverlayManagerService to schedule
ApplicationInfo updates for affected apps, which forces a configuration
change by incrementing Configuration#assetsSeq.

TODO: figure out why not all apps get consistent configuration updates
until manually relaunching activities

Squashed:

    From: minaripenguin <minaripenguin@users.noreply.github.com>
    Date: Mon, 24 Jul 2023 15:35:10 +0800
    Subject: graphics: override more system fonts

    * google mostly hardcodes everything to google-sans family (sometimes monospace), override those fonts as well
    * requires changing of vendor themes google-sans font alias

    test: apply patch, check gboard key buttons if font style was overriden upon system font change

    Change-Id: I04a5f11e86716b3aa4ed90d84f988760aa7bec2b
    Signed-off-by: minaripenguin <minaripenguin@users.noreply.github.com>
    Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>

Change-Id: I684a56315808f78f24a14cd6efeda0ea05e25abf
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 .../android/app/ConfigurationController.java  |  4 +
 graphics/java/android/graphics/Typeface.java  | 83 +++++++++++++++++--
 2 files changed, 80 insertions(+), 7 deletions(-)

diff --git a/core/java/android/app/ConfigurationController.java b/core/java/android/app/ConfigurationController.java
index 5636f6e4db39..ce232289d18b 100644
--- a/core/java/android/app/ConfigurationController.java
+++ b/core/java/android/app/ConfigurationController.java
@@ -28,6 +28,9 @@ import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.HardwareRenderer;
+import android.graphics.Typeface;
+import android.inputmethodservice.InputMethodService;
+import android.os.Build;
 import android.os.LocaleList;
 import android.os.Trace;
 import android.util.DisplayMetrics;
@@ -180,6 +183,7 @@ class ConfigurationController {
             final Application app = mActivityThread.getApplication();
             final Resources appResources = app.getResources();
             mResourcesManager.applyConfigurationToResources(config, compat);
+            Typeface.updateDefaultFont(appResources);
             updateLocaleListFromAppContext(app.getApplicationContext());
 
             if (mConfiguration == null) {
diff --git a/graphics/java/android/graphics/Typeface.java b/graphics/java/android/graphics/Typeface.java
index 9fb627fcc501..f0d2b29caf90 100644
--- a/graphics/java/android/graphics/Typeface.java
+++ b/graphics/java/android/graphics/Typeface.java
@@ -29,6 +29,7 @@ import android.annotation.TestApi;
 import android.annotation.UiThread;
 import android.compat.annotation.UnsupportedAppUsage;
 import android.content.res.AssetManager;
+import android.content.res.Resources;
 import android.graphics.fonts.Font;
 import android.graphics.fonts.FontFamily;
 import android.graphics.fonts.FontStyle;
@@ -69,11 +70,13 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
+import java.lang.reflect.Field;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -143,6 +146,8 @@ public class Typeface {
     private static final LruCache<String, Typeface> sDynamicTypefaceCache = new LruCache<>(16);
     private static final Object sDynamicCacheLock = new Object();
 
+    // For dynamic default font styles
+    private static final HashMap<String, Typeface> sSystemFontOverrides = new HashMap<>();
 
     @GuardedBy("SYSTEM_FONT_MAP_LOCK")
     static Typeface sDefaultTypeface;
@@ -896,7 +901,7 @@ public class Typeface {
      * @return The best matching typeface.
      */
     public static Typeface create(String familyName, @Style int style) {
-        return create(getSystemDefaultTypeface(familyName), style);
+        return create(getSystemOverrideTypeface(familyName), style);
     }
 
     /**
@@ -1212,6 +1217,11 @@ public class Typeface {
         mCleaner.run();
     }
 
+    private static Typeface getSystemOverrideTypeface(@NonNull String familyName) {
+        Typeface tf = sSystemFontOverrides.get(familyName);
+        return tf == null ? getSystemDefaultTypeface(familyName) : tf;
+    }
+
     private static Typeface getSystemDefaultTypeface(@NonNull String familyName) {
         Typeface tf = sSystemFontMap.get(familyName);
         return tf == null ? Typeface.DEFAULT : tf;
@@ -1393,6 +1403,70 @@ public class Typeface {
         }
     }
 
+    private static void setPublicDefaults(String familyName) {
+        synchronized (SYSTEM_FONT_MAP_LOCK) {
+            sDefaults = new Typeface[] {
+                DEFAULT,
+                DEFAULT_BOLD,
+                create(getSystemDefaultTypeface(familyName), Typeface.ITALIC),
+                create(getSystemDefaultTypeface(familyName), Typeface.BOLD_ITALIC),
+            };
+        }
+    }
+
+    private static void setFinalField(String fieldName, Typeface value) {
+        synchronized (SYSTEM_FONT_MAP_LOCK) {
+            try {
+                Field field = Typeface.class.getDeclaredField(fieldName);
+                // isAccessible bypasses final on ART
+                field.setAccessible(true);
+                field.set(null, value);
+                field.setAccessible(false);
+            } catch (NoSuchFieldException | IllegalAccessException e) {
+                Log.e(TAG, "Failed to set Typeface." + fieldName, e);
+            }
+        }
+    }
+
+    /** @hide */
+    public static void updateDefaultFont(Resources res) {
+        synchronized (SYSTEM_FONT_MAP_LOCK) {
+            String familyName = res.getString(com.android.internal.R.string.config_bodyFontFamily);
+            Typeface typeface = sSystemFontMap.get(familyName);
+            if (typeface == null) {
+                // This should never happen, but if the system font family name is invalid, just return
+                // instead of crashing the app.
+                return;
+            }
+
+            setDefault(typeface);
+
+            // Static typefaces in public API
+            setFinalField("DEFAULT", create(getSystemDefaultTypeface(familyName), 0));
+            setFinalField("DEFAULT_BOLD", create(getSystemDefaultTypeface(familyName), Typeface.BOLD));
+            setFinalField("SANS_SERIF", create(familyName, 0));
+            setFinalField("SERIF", create(familyName, 0));
+
+            // For default aliases used in framework styles
+            sSystemFontOverrides.put("sans-serif", typeface);
+            sSystemFontOverrides.put("sans-serif-thin", create(typeface, 100, false));
+            sSystemFontOverrides.put("sans-serif-light", create(typeface, 300, false));
+            sSystemFontOverrides.put("sans-serif-medium", create(typeface, 500, false));
+            sSystemFontOverrides.put("sans-serif-black", create(typeface, 900, false));
+            sSystemFontOverrides.put("sans-serif-condensed", typeface);
+            sSystemFontOverrides.put("sans-serif-condensed-light", create(typeface, 300, false));
+            sSystemFontOverrides.put("sans-serif-condensed-medium", create(typeface, 500, false));
+            sSystemFontOverrides.put("google-sans", typeface);
+            sSystemFontOverrides.put("google-sans-thin", create(typeface, 100, false));
+            sSystemFontOverrides.put("google-sans-light", create(typeface, 300, false));
+            sSystemFontOverrides.put("google-sans-text", create(typeface, 400, false));
+            sSystemFontOverrides.put("google-sans-medium", create(typeface, 500, false));
+            sSystemFontOverrides.put("google-sans-bold", create(typeface, 900, false));
+
+            setPublicDefaults(familyName);
+        }
+    }
+
     /** @hide */
     @VisibleForTesting
     public static void setSystemFontMap(Map<String, Typeface> systemFontMap) {
@@ -1413,12 +1487,7 @@ public class Typeface {
             nativeForceSetStaticFinalField("SERIF", create("serif", 0));
             nativeForceSetStaticFinalField("MONOSPACE", create("monospace", 0));
 
-            sDefaults = new Typeface[]{
-                DEFAULT,
-                DEFAULT_BOLD,
-                create((String) null, Typeface.ITALIC),
-                create((String) null, Typeface.BOLD_ITALIC),
-            };
+            setPublicDefaults(null);
 
             // A list of generic families to be registered in native.
             // https://www.w3.org/TR/css-fonts-4/#generic-font-families
-- 
2.43.0

